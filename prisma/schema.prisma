// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Account {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username          String? @unique
  bio String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  coverImage String?
  profileImage String?
  hashPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  socials Socials?
  hasNotification Boolean?

 followedBy    User[]   @relation("UserFollows", fields: [followedByIDs], references: [id])
  followedByIDs String[] @db.ObjectId
  following     User[]   @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs  String[] @db.ObjectId


  posts Post[] @relation("UserPost")
  reposts Repost[] @relation("UserRepost")
  comments Comment[]
  notification Notification[]

  accounts Account[]
  sessions      Session[]

  likes Like[]
  dislike Dislike[]
}

model Socials {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
    url String?
    instagram String?
    twitter String?
    userId String @db.ObjectId @unique
    user User @relation(fields: [userId], references: [id])
}


model Post {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  content String
  image Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String @db.ObjectId
  likes      Like[]     // Add likes relation
  dislikes   Dislike[]  // Add dislikes relation
  comments Comment[]
  user User @relation("UserPost",fields: [userId], references: [id], onDelete: Cascade)
  reposts Repost[] @relation("PostRepost")
  notification Notification[]


}

model Repost {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime  @default(now())
  userId      String @db.ObjectId
  user       User      @relation("UserRepost",fields: [userId], references: [id])
  postId     String @db.ObjectId
  post      Post     @relation( "PostRepost",fields: [postId], references: [id])
notification Notification[]
}


model Like {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  userId   String? @db.ObjectId
  postId   String? @db.ObjectId
  commentId   String? @db.ObjectId
  post     Post?     @relation(fields: [postId], references: [id])
  user     User?     @relation(fields: [userId], references: [id])
  comment     Comment?     @relation(fields: [commentId], references: [id] )

  createdAt DateTime @default(now())
}

model Dislike {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  postId   String @db.ObjectId
  commentId   String @db.ObjectId
  post     Post     @relation(fields: [postId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
  comment     Comment     @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())
}

model Image {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  imageName   String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  postId  String? @db.ObjectId
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId String?   @db.ObjectId
  comment   Comment?  @relation(fields: [commentId], references: [id],  onDelete: Cascade, onUpdate: Cascade)
}

model Comment {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  reply String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String @db.ObjectId
  postId String? @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  images Image[]
  likes Like[]
  dislike Dislike[]

  parentId    String? @db.ObjectId
  parentComment Comment? @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies     Comment[]  @relation("Replies")
  notification Notification[]

}

model Notification {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  body String
  createdAt DateTime @default(now())

  userId String? @db.ObjectId
  postId String? @db.ObjectId
  commentId String? @db.ObjectId
  repostId String? @db.ObjectId

  toUserId  String? @db.ObjectId
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  repost Repost? @relation(fields: [repostId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String    @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}